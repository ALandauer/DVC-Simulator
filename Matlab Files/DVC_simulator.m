function varargout = DVC_simulator(varargin)
% This GUI was developed by C.Franck (Brown University), 2012.
%Version 2.0 was generated by C.Franck in March, 2015. 
% The DVC algorithms utilized in this Simulator were originally developed and published
% by Franck et al., Journal of Experimental Mechanics, 2007. 
% The simulator will provide the most accurate results for small
% deformation (< 10% nominal strain). If finite deformation analysis is
% required, please download our FIDVC code package (but there's no GUI).
% We hope you'll find this tool useful, and we welcome any suggestions.
% If you would like to use our DVC code package, please download the FIDVC
% package directly from our website.

%*********************************************************************
% DVC_SIMULATOR MATLAB code for DVC_simulator.fig
%      DVC_SIMULATOR, by itself, creates a new DVC_SIMULATOR or raises the existing
%      singleton*.
%
%      H = DVC_SIMULATOR returns the handle to a new DVC_SIMULATOR or the handle to
%      the existing singleton*.
%
%      DVC_SIMULATOR('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in DVC_SIMULATOR.M with the given input arguments.
%
%      DVC_SIMULATOR('Property','Value',...) creates a new DVC_SIMULATOR or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before DVC_simulator_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to DVC_simulator_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help DVC_simulator

% Last Modified by GUIDE v2.5 16-Sep-2015 16:39:58

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @DVC_simulator_OpeningFcn, ...
                   'gui_OutputFcn',  @DVC_simulator_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT

function cmap = CMRmap(M)
%   REFERENCE
% 
%   [1] Rappaport, C. 2002: "A Color Map for Effective
%   Black-and-White Rendering of Color Scale Images", IEEE
%   Antenna's and Propagation Magazine, Vol.44, No.3,
%   pp.94-96 (June).
% 
% See also GRAY.
% !---
% ==========================================================
% Last changed:     $Date: 2012-12-20 14:18:42 +0000 (Thu, 20 Dec 2012) $
% Last committed:   $Revision: 232 $
% Last changed by:  $Author: ch0022 $
% ==========================================================
% !---

% default colormap size
if nargin < 1, M = size(get(gcf,'colormap'),1); end

% reference colour map
% adapted from article to produce more linear luminance
CMRref=...
    [0    0    0;
     0.1  0.1  0.35;
     0.3  0.15 0.65;
     0.6  0.2  0.50;
     1    0.25 0.15;
     0.9  0.55  0;
     0.9  0.75 0.1;
     0.9  0.9  0.5;
     1    1    1];

% Interpolate colormap to colormap size
cmap = zeros(M,3);
for c = 1:3
    cmap(:,c) = interp1((1:9)',CMRref(:,c),linspace(1,9,M)','spline');
end

% Limit to range [0,1]
cmap = cmap-min(cmap(:));
cmap = cmap./max(cmap(:));

% --- Executes just before DVC_simulator is made visible.
function DVC_simulator_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to DVC_simulator (see VARARGIN)

% Choose default command line output for DVC_simulator
handles.output = hObject;

handles.dicw = 64;
handles.dicd = 16;
handles.trans = 7;
handles.epp = 0.02;

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes DVC_simulator wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = DVC_simulator_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --- Executes on button press in pushbutton4.
function pushbutton4_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton4 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in pushbutton5.
function pushbutton5_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton5 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes loading your 3D volumetric Image stack
function pushbutton8_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton8 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
[filename, pathname] = uigetfile({'*.mat'},'Select your DVC Image Stack');
% if isequal(filename,0)
%    disp('User selected Cancel')
% else
%    disp(['User selected', fullfile(pathname, filename)])
% end
%  dvc_file = load(filename);
%  handles.pic = dvc_file.vol_stack; 
handles.pic2 = importdata([pathname,filename]);
[M,N,P] = size(handles.pic2);
set(handles.imX,'String', M); 
set(handles.imY,'String', N); 
set(handles.imZ,'String', P); 
handles.M = M;
handles.N = N;
handles.P = P;
%resize image:
%[x,y,z] = meshgrid(0:128,0:128,0:64);
%handles.pic = interp3(handles.pic2,x,y,z);
handles.pic = handles.pic2;
[m,n,p] = size(handles.pic);
xy = squeeze(handles.pic(:,:,round(p/2)));
xz = squeeze(handles.pic(round(m/2),:,:));
yz = squeeze(handles.pic(:,round(n/2),:));

axes(handles.picxy);
imagesc(xy);
set(gca,'fontweight','b','FontSize',11,'xcolor','k','ycolor','k');

axes(handles.picxz);
imagesc(xz);
set(gca,'fontweight','b','FontSize',11,'xcolor','k','ycolor','k');
set(gca,'xtick',0:round(p/3):p);

axes(handles.picyz);
imagesc(yz');
%figure, subplot(1,2,1), imagesc(yz), subplot(1,2,2), imagesc(yz');
set(gca,'fontweight','b','FontSize',11,'xcolor','k','ycolor','k');
guidata(hObject,handles);

% --- Executes on button press in pushbutton9.
function pushbutton9_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton9 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
M = handles.M; %original image size
N = handles.N;
P = handles.P;
M1 = str2double(get(handles.imX, 'String'));
N1 = str2double(get(handles.imY, 'String'));
P1 = str2double(get(handles.imZ, 'String'));
m0 = round(M/2); n0 = round(N/2); p0 = round(P/2);
m1 = round(M1/2); n1 = round(N1/2); p1 = round(P1/2);
i1 = m0-m1; i2 = m0+m1-1;
j1 = n0-n1; j2 = n0+n1-1;
k1 = p0-p1; k2 = p0+p1-1;

picnew = handles.pic(j1:j2,i1:i2,k1:k2);

handles.pic = picnew;
[m,n,p] = size(handles.pic);
xy = squeeze(handles.pic(:,:,round(p/2)));
xz = squeeze(handles.pic(round(m/2),:,:));
yz = squeeze(handles.pic(:,round(n/2),:));

axes(handles.picxy);
imagesc(xy);
set(gca,'fontweight','b','FontSize',11,'xcolor','k','ycolor','k');

axes(handles.picxz);
imagesc(xz);
set(gca,'fontweight','b','FontSize',11,'xcolor','k','ycolor','k');
set(gca,'xtick',0:round(p/3):p);

axes(handles.picyz);
imagesc(yz');
set(gca,'fontweight','b','FontSize',11,'xcolor','k','ycolor','k');
guidata(hObject,handles);

% --- Executes on selection change in output_selection.
function output_selection_Callback(hObject, eventdata, handles)
% hObject    handle to output_selection (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% Hints: contents = get(hObject,'String') returns output_selection contents as cell array
%        contents{get(hObject,'Value')} returns selected item from output_selection
popup_sel_index = get(handles.output_selection, 'Value');
handles.popup = popup_sel_index;
guidata(hObject, handles);

% --- Executes during object creation, after setting all properties.
function output_selection_CreateFcn(hObject, eventdata, handles)
% hObject    handle to output_selection (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
handles.popup = 1;
guidata(hObject, handles);

%Setting the DVC Subset size for the DVC
function edit8_Callback(hObject, eventdata, handles)
% hObject    handle to edit8 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit8 as text
%        str2double(get(hObject,'String')) returns contents of edit8 as a double
w = str2double(get(hObject, 'String'));
if isnan(w)
    set(hObject, 'String', 0);
    errordlg('Input must be a number','Error');
end

% Save the new density value
handles.dicw = w;
guidata(hObject,handles);

% --- Executes during object creation, after setting all properties.
function edit8_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit8 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
handles.dicw = 64;
guidata(hObject,handles);

%Setting the DVC Subset spacing for the DVC
function edit9_Callback(hObject, eventdata, handles)
% hObject    handle to edit9 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit9 as text
%        str2double(get(hObject,'String')) returns contents of edit9 as a double
d = str2double(get(hObject, 'String'));
if isnan(d)
    set(hObject, 'String', 0);
    errordlg('Input must be a number','Error');
end

% Save the new density value
handles.dicd = d;
guidata(hObject,handles);


% --- Executes during object creation, after setting all properties.
function edit9_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit9 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
handles.dicd = 16;
guidata(hObject,handles);

%Setting the level of applied nominal strain applied to the image prior DVC
function edit10_Callback(hObject, eventdata, handles)
% hObject    handle to edit10 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit10 as text
%        str2double(get(hObject,'String')) returns contents of edit10 as a double
epp = str2double(get(hObject, 'String'));
if isnan(epp)
    set(hObject, 'String', 0);
    errordlg('Input must be a number','Error');
end

% Save the new density value
handles.epp = epp;
guidata(hObject,handles);

% --- Executes during object creation, after setting all properties.
function edit10_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit10 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
handles.epp = 0.02;
guidata(hObject,handles);

%Setting the level of x-translation applied to the image prior DVC
function edit11_Callback(hObject, eventdata, handles)
% hObject    handle to edit11 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit11 as text
%        str2double(get(hObject,'String')) returns contents of edit11 as a double
trans = str2double(get(hObject, 'String'));
if isnan(trans)
    set(hObject, 'String', 0);
    errordlg('Input must be a number','Error');
end

% Save the new density value
handles.trans = trans;
guidata(hObject,handles);


% --- Executes during object creation, after setting all properties.
function edit11_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit11 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
handles.trans = 7;
guidata(hObject,handles);

% --- Executes on button press the actual DVC Simulator Code
function pushbutton10_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton10 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
handles.epp;
[handles.tpic handles.strpic handles.shpic handles.ppic dispp] = speckles3D(handles.epp, handles.trans, handles.pic);

%Execute 3D DVC code *******************************************************
%handles.inc=0;

%Translation
[ut vt wt] = run3dvc(handles.dicw,handles.dicd,handles.pic,handles.tpic);
%For testing purposes ONLY: (loading dataset directly)
%load('exampleDVC.mat');
% handles.x1 = x;
% handles.y1 = y;
% handles.z1 = z;
handles.ut = ut; 
handles.vt = vt;
handles.wt = wt;

%Uniaxal Tension
[ua va wa] = run3dvc(handles.dicw,handles.dicd,handles.pic,handles.strpic);
handles.ua = ua; 
handles.va= va;
handles.wa = wa;

%Pure Shear
[us vs ws] = run3dvc(handles.dicw,handles.dicd,handles.pic,handles.shpic);
handles.us = us; 
handles.vs = vs;
handles.ws = ws;

%Point Force (arbitrary problem construction)
[up vp wp] = run3dvc(handles.dicw,handles.dicd,handles.pic,handles.ppic);
handles.up = up; 
handles.vp = vp;
handles.wp = wp;

[M,N,P]=size(handles.pic);%Find the size of the confocal image
%w0=64;d0=16; %w0:Subset size & d0:Subset spacing, 
    %For example, when M=N=P=512, (w0=64,d0=32) gives 15x15x15 data points for correlations
x0=N/2;y0=M/2; z0 = round(P/2); %find the center of the image
d0=handles.dicd;
%d0 = 8;
%y0=256;x0=256;z0=256; %Manually select center
m=round(M/2/d0)-1;n=round(N/2/d0)-1; p=round(P/2/d0)-1;% number of correlation points in half of the image (any integer)
[x,y,z]=meshgrid([-n:n]*d0+x0,[-m:m]*d0+y0,[-p:p]*d0+z0);%
handles.x = x;
handles.y = y;
handles.z = z;
handles.m = round(M/d0);
handles.n = round(N/d0);
handles.p = round(P/d0);

if handles.popup == 1,
    handles.u = handles.ut;
    handles.v = handles.vt;
    handles.w = handles.wt;

end
if handles.popup == 2,
    handles.u = handles.ua;
    handles.v = handles.va;
    handles.w = handles.wa;

end
if handles.popup == 3,
    handles.u = handles.us;
    handles.v = handles.vs;
    handles.w = handles.ws;

end
if handles.popup == 4,
    handles.u = handles.up;
    handles.v = handles.vp;
    handles.w = handles.wp;

end
handles.displ = sqrt(handles.u.^2 + handles.v.^2 + handles.w.^2);
m = handles.m;
n = handles.n;
p = handles.p;

axes(handles.axes28);
%im(handles.tpic);
handles.xx = squeeze(handles.x(:,:,round(p/2)));
handles.yy = squeeze(handles.y(:,:,round(p/2)));
handles.uxy = squeeze(handles.u(:,:,round(p/2)));

off = [handles.displ1];
set(off,'Value',1)

%handles.displ;
contourf(handles.xx, handles.yy,handles.uxy); colorbar;
h = colorbar;
set(get(h,'title'),'string','Pixel','fontweight','b','fontsize',12,'color','k');
set(h,'fontweight','b', 'fontsize',12);
grid on
axis tight
set(gca,'fontweight','b','FontSize',12,'xcolor','k','ycolor','k');
xlabel('x (pixel)','fontweight','b','FontSize',12); 
ylabel('y (pixel)','fontweight','b','FontSize',12);

axes(handles.axes29);
handles.yy = squeeze(handles.y(:,round(n/2),:));
handles.zz = squeeze(handles.z(:,round(n/2),:));
handles.uyz = squeeze(handles.u(:,round(n/2),:));

%handles.displ;
contourf(handles.zz, handles.yy,handles.uyz); colorbar;
h = colorbar;
set(get(h,'title'),'string','Pixel','fontweight','b','fontsize',12,'color','k');
set(h,'fontweight','b', 'fontsize',12);
grid on
axis tight
set(gca,'fontweight','b','FontSize',12,'xcolor','k','ycolor','k');
xlabel('z (pixel)','fontweight','b','FontSize',12); 
ylabel('y (pixel)','fontweight','b','FontSize',12);

axes(handles.axes31);
handles.xx = squeeze(handles.x(round(m/2),:,:));
handles.zz = squeeze(handles.z(round(m/2),:,:));
handles.uxz = squeeze(handles.u(round(m/2),:,:));

%handles.displ;
contourf(handles.zz, handles.xx,handles.uxz); colorbar;
h = colorbar;
set(get(h,'title'),'string','Pixel','fontweight','b','fontsize',11,'color','k');
set(h,'fontweight','b', 'fontsize',12);
grid on
axis tight
set(gca,'fontweight','b','FontSize',12,'xcolor','k','ycolor','k');
xlabel('z (pixel)','fontweight','b','FontSize',12); 
ylabel('x (pixel)','fontweight','b','FontSize',12);

%HISTOGRAMS********************
%Fontsize:
ft = 11;
axes(handles.axes52);
clear err;
err = (handles.ut - dispp.ut2)./dispp.ut2*100;
err = err(:);
hist(err,20);
set(gca,'fontweight','b','FontSize',ft,'xcolor','k','ycolor','k');
%xlabel('difference (pixel)','fontweight','b','FontSize',10);
%ylabel('U_1','fontweight','b','FontSize',10);

axes(handles.axes41);
if dispp.vt2 == 0,
    err = (handles.vt)*100;
else
err = (handles.vt - dispp.vt2)./dispp.vt2*100;
end
err = err(:);
hist(err,20);
set(gca,'fontweight','b','FontSize',ft,'xcolor','k','ycolor','k');
%xlabel('difference (pixel)','fontweight','b','FontSize',10);
%ylabel('U_2','fontweight','b','FontSize',10);

axes(handles.axes42);
if dispp.wt2 == 0,
    err = (handles.wt)*100;
else
err = (handles.wt - dispp.wt2)./dispp.wt2*100;
end
err = err(:);
hist(err,20);
set(gca,'fontweight','b','FontSize',ft,'xcolor','k','ycolor','k');
%xlabel('difference (pixel)','fontweight','b','FontSize',10);
%ylabel('U_2','fontweight','b','FontSize',10);

%*****Uniaxial Tension ************

axes(handles.axes43);
%Construct the solution right here:
% [M,N]=size(handles.strpic);
% x0=N/2;y0=M/2; %find the center of the image
% d0 = handles.dicd;
% m=round(M/2/d0)-1;n=round(N/2/d0)-1;% number of correlation points in half of the image (any integer)
% [x,y]=meshgrid([-n:n]*d0+x0,[-m:m]*d0+y0);
strain = handles.epp;
ua = strain*x;   % apply strain along x-direction
va = -strain/2*y;   % Poisson's contraction with nu = 0.5
wa = -strain/2*z;   % Poisson's contraction with nu = 0.5
err = (handles.ua - ua)./ua*100;
err = err(:);
hist(err,20);
set(gca,'fontweight','b','FontSize',ft,'xcolor','k','ycolor','k');
%xlabel('difference (pixel)','fontweight','b','FontSize',10);
%ylabel('Frequency','fontweight','b','FontSize',10);

axes(handles.axes44);
err = (handles.va - va)./va*100;
err = err(:);
hist(err,20);
set(gca,'fontweight','b','FontSize',ft,'xcolor','k','ycolor','k');
%xlabel('difference (pixel)','fontweight','b','FontSize',10);
%ylabel('Frequency','fontweight','b','FontSize',10);

axes(handles.axes45);
err = (handles.wa - wa)./wa*100;
err = err(:);
hist(err,20);
set(gca,'fontweight','b','FontSize',ft,'xcolor','k','ycolor','k');
%xlabel('difference (pixel)','fontweight','b','FontSize',10);
%ylabel('Frequency','fontweight','b','FontSize',10);

%*****Simple Shear ************

axes(handles.axes49);
us = strain*y;   %  shear in x
vs = strain*x;   %  shear in y
w = 0;

err = (handles.us - us)./us*100;
err = err(:);
hist(err,20);
set(gca,'fontweight','b','FontSize',ft,'xcolor','k','ycolor','k');
%xlabel('difference (pixel)','fontweight','b','FontSize',10);
%ylabel('Frequency','fontweight','b','FontSize',10);

axes(handles.axes50);
err = (handles.vs - vs)./vs*100;
err = err(:);
hist(err,20);
set(gca,'fontweight','b','FontSize',ft,'xcolor','k','ycolor','k');
%xlabel('difference (pixel)','fontweight','b','FontSize',10);
%ylabel('Frequency','fontweight','b','FontSize',10);

axes(handles.axes51);
err = (handles.ws)*100;
err = err(:);
hist(err,20);
set(gca,'fontweight','b','FontSize',ft,'xcolor','k','ycolor','k');
%xlabel('difference (pixel)','fontweight','b','FontSize',10);
%ylabel('Frequency','fontweight','b','FontSize',10);


%********Point Force ******************
% generate point force image
nu = 0.4;
E = 1000;
Fz = E*strain;
[m,n,p] = size(x);

x = x- round(n/2);
y = y - round(m/2);
z = z - round(p/2);
%z = z - max(z(:));
r = sqrt(x.^2 + y.^2 + z.^2);
ind = find(r == 0); %Exclude the singularity at r = 0

Fx = 0; Fy = Fx;
coeff = (1+nu)/(8*pi*E*(1-nu));

up = x./r.^3.*( Fx*x + Fy*y + Fz*z) + (3-4*nu)*Fx/r;

vp = y./r.^3.*( Fx*x + Fy*y + Fz*z) + (3-4*nu)*Fy/r;

wp = z./r.^3.*( Fx*x + Fy*y + Fz*z) + (3-4*nu)*Fz/r;

up(ind) = 0; vp(ind) = 0; wp(ind) = 0;

axes(handles.axes46);
err = (handles.up - up)./up*100;
err = err(:);
hist(err,20);
set(gca,'fontweight','b','FontSize',ft,'xcolor','k','ycolor','k');
%xlabel('difference (pixel)','fontweight','b','FontSize',10);
%ylabel('Frequency','fontweight','b','FontSize',10);

axes(handles.axes47);
err = (handles.vp - vp)./vp*100;
err = err(:);
hist(err,20);
set(gca,'fontweight','b','FontSize',ft,'xcolor','k','ycolor','k');
%xlabel('difference (pixel)','fontweight','b','FontSize',10);
%ylabel('Frequency','fontweight','b','FontSize',10);

axes(handles.axes48);
err = (handles.wp - wp)./wp*100;
err = err(:);
hist(err,20);
set(gca,'fontweight','b','FontSize',ft,'xcolor','k','ycolor','k');
%xlabel('difference (pixel)','fontweight','b','FontSize',10);
%ylabel('Frequency','fontweight','b','FontSize',10);

guidata(hObject, handles);

%Resize Image Length (x)
function imX_Callback(hObject, eventdata, handles)
% hObject    handle to imX (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of imX as text
%        str2double(get(hObject,'String')) returns contents of imX as a double
xx = str2double(get(hObject, 'String'));
if isnan(xx)
    set(hObject, 'String', 0);
    errordlg('Input must be a number','Error');
end

% Save the x-dimension value
handles.imxx = xx;
guidata(hObject,handles);

% --- Executes during object creation, after setting all properties.
function imX_CreateFcn(hObject, eventdata, handles)
% hObject    handle to imX (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


%Resize Image Width (y)
function imY_Callback(hObject, eventdata, handles)
% hObject    handle to imY (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of imY as text
%        str2double(get(hObject,'String')) returns contents of imY as a double
yy = str2double(get(hObject, 'String'));
if isnan(yy)
    set(hObject, 'String', 0);
    errordlg('Input must be a number','Error');
end

% Save the new y-dimension value
handles.imyy = yy;
guidata(hObject,handles);

% --- Executes during object creation, after setting all properties.
function imY_CreateFcn(hObject, eventdata, handles)
% hObject    handle to imY (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


%Resize Image Height (z)
function imZ_Callback(hObject, eventdata, handles)
% hObject    handle to imZ (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of imZ as text
%        str2double(get(hObject,'String')) returns contents of imZ as a double
zz = str2double(get(hObject, 'String'));
if isnan(zz)
    set(hObject, 'String', 0);
    errordlg('Input must be a number','Error');
end

% Save the new z-dimension value
handles.imzz = zz;
guidata(hObject,handles);

% --- Executes during object creation, after setting all properties.
function imZ_CreateFcn(hObject, eventdata, handles)
% hObject    handle to imZ (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%*********************************************************************
function [tpic strpic shpic ppic dispp] = speckles3D(strain, trans, pic);
h = waitbar(0,'Please wait simulating deformations... ');
waitbar(1/4,h);
 %General image warping based on deformation field                   
C= pic; % test image
[x, y,z] = meshgrid(1:size(C,2), 1:size(C,1),1:size(C,3));

% generate translated image
u = trans;   % x-translation
v = 0;   % y-translation
w = 0; %z-translation
dispp.ut2 = u;
dispp.vt2 = v;
dispp.wt2 = w;
tpic = interp3(double(C), x-u, y-v,z-w);
[m,n,p] = size(C);
BB = squeeze(tpic(:,:,round(p/2)));
CC = squeeze(C(:,:,round(p/2)));
%figure, im(CC);
%figure,im(BB);
clear u; clear v; clear w;

strpic = tpic; shpic = tpic; ppic = tpic;

% generate uniaxially stretched image
u = strain*x;   % apply strain along x-direction
v = -strain/2*y;   % Poisson's contraction with nu = 0.5
w = -strain/2*z;   % Poisson's contraction with nu = 0.5
dispp.ua2 = u;
dispp.va2 = v;
dispp.wa2 = w;
strpic = interp3(double(C), x-u, y-v, z-w);
[m,n,p] = size(C);
BB = squeeze(strpic(:,:,round(p/2)));
CC = squeeze(C(:,:,round(p/2)));
% figure, im(CC);
% figure,im(BB);
waitbar(2/4,h);
clear u; clear v; clear w;
% 
% generate pure sheared  image
u = strain*y;   %  shear in x
v = strain*x;   %  shear in y
w = 0;
dispp.us2 = u;
dispp.vs2 = v;
dispp.ws2 = w;
% compute the warped image - the subtractions are because we're specifying
% where in the original image each pixel in the new image comes from
shpic = interp3(double(C), x-u, y-v, z-w);
[m,n,p] = size(C);
BB = squeeze(shpic(:,:,round(p/2)));
CC = squeeze(C(:,:,round(p/2)));
%figure, im(CC);
%figure,im(BB);
%figure,im(shpic);
waitbar(3/4,h);
clear u; clear v; clear w;
% 
% generate point force image
nu = 0.4;
E = 100;
Fz = E*strain;
[m,n] = size(x);

x = x-round(size(C,2)/2);
y = y - round(size(C,1)/2);
z = z - round(size(C,3)/2);
%z = z - max(z(:));
r = sqrt(x.^2 + y.^2 + z.^2);
ind = find(r == 0); %Exclude the singularity at r = 0

%r(ind) = 5*10^-4; %5e-4
%u = Fx*r.^-2; v = Fx*r.^-2; w = Fx*r.^-2;
% coeff = (1+nu)/(2*pi*E);
% Fz = Fx; Fy = Fx;
% u = coeff*( (x.*z./r.^3 - (1-2*nu)*x./( r.*(r + z)))*Fz...
%     + (2*(1-nu)*r + z)./(r.*(r + z))*Fx...
%     + (2*r.*(nu*r + z) + z.^2).*x./(r.^3.*(r + z).^2).*(x*Fx + y*Fy));
% 
% v = coeff*( (y.*z./r.^3 - (1-2*nu)*y./( r.*(r + z)))*Fz...
%     + (2*(1-nu)*r + z)./(r.*(r + z))*Fy...
%     + (2*r.*(nu*r + z) + z.^2).*y./(r.^3.*(r + z).^2).*(x*Fx + y*Fy));
% 
% w = coeff*( (2*(1-nu)./r + z.^2./r.^3)*Fz ...
%     + ( (1-2*nu)./(r.*(r + z) + z./r.^3)).*(x*Fx + y*Fy));

Fx = 0; Fy = Fx;
coeff = (1+nu)/(8*pi*E*(1-nu));

u = x./r.^3.*( Fx*x + Fy*y + Fz*z) + (3-4*nu)*Fx/r;

v = y./r.^3.*( Fx*x + Fy*y + Fz*z) + (3-4*nu)*Fy/r;

w = z./r.^3.*( Fx*x + Fy*y + Fz*z) + (3-4*nu)*Fz/r;

u(ind) = 0; v(ind) = 0; w(ind) = 0;
max(u(:)); %Max. displacement occurs at k = p/2 -1 
dispp.up2 = u;
dispp.vp2 = v;
dispp.wp2 = w;
% compute the warped image - the subtractions are because we're specifying
% where in the original image each pixel in the new image comes from
clear ppic;
ppic = interp3(x,y,z,double(C), x-u, y-v, z-w);
BB = squeeze(ppic(:,:,round(p/2)));
CC = squeeze(C(:,:,round(p/2)));
waitbar(1,h);
%figure, im(CC);
%figure,im(BB);
v;


close(h);
%----------------------------------------------------------

% ************** 3D DVC Code ********************
function [ub vb wb] = run3dvc(w0,d0,ia,ib);
%--------------------------Opening & Reading all Images--------------------

[M,N,P]=size(ia);
x0=N/2;y0=M/2;z0=P/2; 
m=round(M/2/d0)-1;n=round(N/2/d0)-1;p=round(P/2/d0)-1;
[x,y,z]=meshgrid([-n:n]*d0+x0,[-m:m]*d0+y0,[-p:p]*d0+z0);
ua=zeros(size(x));va=ua;wa=ua;

%----------------------Executing DVC Code & Calculations--------------------

%tic %Starts computing timer (for reference only) for 1st stack
%[x,y,z,ua,va,wa]=dic3d(ia,ib,w0,d0);
% DVC cross-correlation
[ub,vb,wb]=dvc_full(ia,ib,x,y,z,ua,va,wa,w0);
%[uc,vc,wc]=dvc_full(ia,ib,x,y,z,ub,vb,wb,w0);
%[ud,vd,wd,u11d,u22d,u33d]=dvc_str_full(ia,ib,x,y,z,uc,vc,wc,w0)

%--------------------------------------------------------------------------

%****** INTERNAL DVC CODE
%**************************************************
function [u,v,w]=dvc_full(m0,m1,x0,y0,z0,ua,va,wa,w0)
[M N P]=size(m0);
[m n p]=size(x0);
u=zeros(m,n,p)*nan;v=u;w=u;
x0=round(x0);y0=round(y0);z0=round(z0);
x1=x0+round(ua);y1=y0+round(va);z1=z0+round(wa);
h = waitbar(0,'Please wait DVC is computing displacements... ');
for i=1:m,
   waitbar(i/m,h);
   for j=1:n,
       for k=1:p,
      i0=(y0(i,j,k)-w0/2+1); i1=y0(i,j,k)+w0/2;
      j0=(x0(i,j,k)-w0/2+1); j1=x0(i,j,k)+w0/2;
      k0=(z0(i,j,k)-w0/2+1); k1=z0(i,j,k)+w0/2;
      p0=(y1(i,j,k)-w0/2+1); p1=y1(i,j,k)+w0/2;
      q0=(x1(i,j,k)-w0/2+1); q1=x1(i,j,k)+w0/2;
      r0=(z1(i,j,k)-w0/2+1); r1=z1(i,j,k)+w0/2;
          if i0>=1 & i0<=M & j0>=1 & j0<=N & k0>=1 & k0<=P & ...
             i1>=1 & i1<=M & j1>=1 & j1<=N & k1>=1 & k1<=P & ...
             p0>=1 & p0<=M & q0>=1 & q0<=N & r0>=1 & r0<=P & ...
             p1>=1 & p1<=M & q1>=1 & q1<=N & r1>=1 & r1<=P ,
             dm0=m0(i0:i1,j0:j1,k0:k1);
             dm1=m1(p0:p1,q0:q1,r0:r1);
             [du dv dw]=decorr3da(dm0,dm1);
             if(length(du)*length(dv)*length(dw)==1)
%                x(i,j,k)=(j-1)*d+d/2;
%                y(i,j,k)=(i-1)*d+d/2;
%                z(i,j,k)=(k-1)*d+d/2;
                u(i,j,k)=round(ua(i,j,k))+du;
                v(i,j,k)=round(va(i,j,k))+dv;
                w(i,j,k)=round(wa(i,j,k))+dw;
             end
          end
      end
   end
end
close(h);

function [du,dv,dw]=decorr3da(dm0,dm1)
[M,N,P]=size(dm0);
dm0=double(dm0); dm1=double(dm1);
%h=hanning(dm0);
c=abs(fftshift(ifftn( conj(fftn(dm0)).*fftn(dm1) )));
%c=abs(fftshift(ifftn( conj(fftn(dm0.*h)).*fftn(dm1.*h) )));
%c=abs(fftshift(ifftn( conj(fftn(dm0)).*fftn(dm1)./abs(conj(fftn(dm0)).*fftn(dm1)) )));
cc=sum(sum(sum((dm0-dm1).*(dm0-dm1))));
if cc==0
   	  du=nan;
   	  dv=nan;
      dw=nan;
   else 
      ci=find(c==max(c(:)));
%      dw=ceil(ci/(M*N));
%      du=ceil((mod(ci-1,M*N)+1)/N);
%      dv=mod(mod(ci-1,M*N),N)+1;
      [dv du dw]=ind2sub(size(c),ci);
      %save('check_displ.mat','c','dv','du','dw');

   if dv==1|dv==M|du==1|du==N|dw==1|dw==P,
        du=nan;dv=nan;dw=nan;
   else
       [m,n,p] = size(c);
       if (dv~=m & du~=n & dw~=p & dv~=1 & du~=1 & dw~=1),    
            cc=c(dv-1:dv+1,du-1:du+1,dw-1:dw+1);        xx=lsqq3(cc);
%            cc=c(dv-2:dv+2,du-2:du+2,dw-2:dw+2);        xx=lsqq5(cc);
%            cc=c(dv-3:dv+3,du-3:du+3,dw-3:dw+3);        xx=lsqq5(cc);
%           xx=lsqq3(log(cc+1));
%            xx=lsqqw3(cc);
%           dc=sqrt(x(1)^2+x(2)^2+x(3)^2);
         du=du+xx(1)-(N/2+1);
         dv=dv+xx(2)-(M/2+1);
         dw=dw+xx(3)-(P/2+1);
       else
         du=du -(N/2+1);
         dv=dv -(M/2+1);
         dw=dw -(P/2+1);    
       end
   end
end

function    xx=lsqq3(c)
        [mm,nn,pp]=size(c);
        [x,y,z]=meshgrid(-(mm-1)/2:(mm-1)/2,-(nn-1)/2:(nn-1)/2,-(pp-1)/2:(pp-1)/2);
        x2=x.*x;
        y2=y.*y;
        z2=z.*z;

%        A=[...
%            sum3(x2.*x2) sum3(x2.*y2) sum3(x2.*z2) sum3(x2.*x.*y) sum3(x2.*y.*z) sum3(x2.*z.*x) sum3(x2.*x) sum3(x2.*y) sum3(x2.*z) sum3(x2);
%            sum3(y2.*x2) sum3(y2.*y2) sum3(y2.*z2) sum3(y2.*x.*y) sum3(y2.*y.*z) sum3(y2.*z.*x) sum3(y2.*x) sum3(y2.*y) sum3(y2.*z) sum3(y2);
%            sum3(z2.*x2) sum3(z2.*y2) sum3(z2.*z2) sum3(z2.*x.*y) sum3(z2.*y.*z) sum3(z2.*z.*x) sum3(z2.*x) sum3(z2.*y) sum3(z2.*z) sum3(z2);
%            sum3(x.*y.*x2) sum3(x.*y.*y2) sum3(x.*y.*z2) sum3(x.*y.*x.*y) sum3(x.*y.*y.*z) sum3(x.*y.*z.*x) sum3(x.*y.*x) sum3(x.*y.*y) sum3(x.*y.*z) sum3(x.*y);
%            sum3(y.*z.*x2) sum3(y.*z.*y2) sum3(y.*z.*z2) sum3(y.*z.*x.*y) sum3(y.*z.*y.*z) sum3(y.*z.*z.*x) sum3(y.*z.*x) sum3(y.*z.*y) sum3(y.*z.*z) sum3(y.*z);
%            sum3(z.*x.*x2) sum3(z.*x.*y2) sum3(z.*x.*z2) sum3(z.*x.*x.*y) sum3(z.*x.*y.*z) sum3(z.*x.*z.*x) sum3(z.*x.*x) sum3(z.*x.*y) sum3(z.*x.*z) sum3(z.*x);
%            sum3(x.*x2) sum3(x.*y2) sum3(x.*z2) sum3(x.*x.*y) sum3(x.*y.*z) sum3(x.*z.*x) sum3(x.*x) sum3(x.*y) sum3(x.*z) sum3(x);
%            sum3(y.*x2) sum3(y.*y2) sum3(y.*z2) sum3(y.*x.*y) sum3(y.*y.*z) sum3(y.*z.*x) sum3(y.*x) sum3(y.*y) sum3(y.*z) sum3(y);
%            sum3(z.*x2) sum3(z.*y2) sum3(z.*z2) sum3(z.*x.*y) sum3(z.*y.*z) sum3(z.*z.*x) sum3(z.*x) sum3(z.*y) sum3(z.*z) sum3(z);
%            sum3(x2) sum3(y2) sum3(z2) sum3(x.*y) sum3(y.*z) sum3(z.*x) sum3(x) sum3(y) sum3(z) sum3(ones(mm,nn,pp))...
%            ];
        
        A=[...
            18    12    12     0     0     0     0     0     0    18;
            12    18    12     0     0     0     0     0     0    18;
            12    12    18     0     0     0     0     0     0    18;
             0     0     0    12     0     0     0     0     0     0;
             0     0     0     0    12     0     0     0     0     0;
             0     0     0     0     0    12     0     0     0     0;
             0     0     0     0     0     0    18     0     0     0;
             0     0     0     0     0     0     0    18     0     0;
             0     0     0     0     0     0     0     0    18     0;
            18    18    18     0     0     0     0     0     0    27];
            
        y=[ sum3(x2.*c) sum3(y2.*c) sum3(z2.*c) sum3(x.*y.*c) sum3(y.*z.*c) sum3(z.*x.*c) sum3(x.*c) sum3(y.*c) sum3(z.*c) sum3(c) ]';
        x=A\y; %Backslash = Linear Equation solver
        
        AA=[2*x(1)      x(4)      x(6);
              x(4)    2*x(2)      x(5);
              x(6)      x(5)    2*x(3)];
        yy=[ -x(7)     -x(8)     -x(9)]';
        xx=AA\yy;
        
%        x0=-x(4)/2/x(1);
%        y0=-x(5)/2/x(2);
%        z0=-x(6)/2/x(3);
%        dc=sqrt(x(1)^2+x(2)^2+x(3)^2)

function s=sum3(a);
s=sum(a(:));
%******* END of DVC Code *************************************


% --- Executes on button press in displ1.
function displ1_Callback(hObject, eventdata, handles)
% hObject    handle to displ1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
off = [handles.radiobutton19];
set(off,'Value',0)
off = [handles.radiobutton20];
set(off,'Value',0)
off = [handles.radiobutton21];
set(off,'Value',0)
% Hint: get(hObject,'Value') returns toggle state of displ1
m = handles.m; 
n = handles.n; 
p = handles.p; 

if handles.popup == 1,
    handles.u = handles.ut;
    handles.v = handles.vt;
    handles.w = handles.wt;

end
if handles.popup == 2,
    handles.u = handles.ua;
    handles.v = handles.va;
    handles.w = handles.wa;

end
if handles.popup == 3,
    handles.u = handles.us;
    handles.v = handles.vs;
    handles.w = handles.ws;

end
if handles.popup == 4,
    handles.u = handles.up;
    handles.v = handles.vp;
    handles.w = handles.wp;

end

%handles.displ = sqrt(handles.u.^2 + handles.v.^2 + handles.w.^2);

axes(handles.axes28);
%im(handles.tpic);
handles.xx = squeeze(handles.x(:,:,round(p/2)));
handles.yy = squeeze(handles.y(:,:,round(p/2)));
handles.vxy = squeeze(handles.u(:,:,round(p/2)));

%handles.displ;
contourf(handles.xx, handles.yy,handles.vxy); colorbar;
h = colorbar;
set(get(h,'title'),'string','Pixel','fontweight','b','fontsize',12,'color','k');
set(h,'fontweight','b', 'fontsize',12);
grid on
axis tight
set(gca,'fontweight','b','FontSize',12,'xcolor','k','ycolor','k');
xlabel('x (pixel)','fontweight','b','FontSize',12); 
ylabel('y (pixel)','fontweight','b','FontSize',12); 

axes(handles.axes29);
handles.yy = squeeze(handles.y(:,round(n/2),:));
handles.zz = squeeze(handles.z(:,round(n/2),:));
handles.vyz = squeeze(handles.u(:,round(n/2),:));

%handles.displ;
contourf(handles.zz, handles.yy,handles.vyz); colorbar;
h = colorbar;
set(get(h,'title'),'string','Pixel','fontweight','b','fontsize',12,'color','k');
set(h,'fontweight','b', 'fontsize',12);
grid on
axis tight
set(gca,'fontweight','b','FontSize',12,'xcolor','k','ycolor','k');
xlabel('z (pixel)','fontweight','b','FontSize',12); 
ylabel('y (pixel)','fontweight','b','FontSize',12); 

axes(handles.axes31);
handles.xx = squeeze(handles.x(round(m/2),:,:));
handles.zz = squeeze(handles.z(round(m/2),:,:));
handles.vxz = squeeze(handles.u(round(m/2),:,:));

%handles.displ;
contourf(handles.zz, handles.xx,handles.vxz); colorbar;
h = colorbar;
set(get(h,'title'),'string','Pixel','fontweight','b','fontsize',12,'color','k');
set(h,'fontweight','b', 'fontsize',12);
grid on
axis tight
set(gca,'fontweight','b','FontSize',12,'xcolor','k','ycolor','k');
xlabel('z (pixel)','fontweight','b','FontSize',12); 
ylabel('x (pixel)','fontweight','b','FontSize',12); 


% --- Executes on button press in radiobutton19.
function radiobutton19_Callback(hObject, eventdata, handles)
% hObject    handle to radiobutton19 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
off = [handles.displ1];
set(off,'Value',0)
off = [handles.radiobutton20];
set(off,'Value',0)
off = [handles.radiobutton21];
set(off,'Value',0)
% Hint: get(hObject,'Value') returns toggle state of radiobutton19
m = handles.m; 
n = handles.n; 
p = handles.p; 

if handles.popup == 1,
    handles.u = handles.ut;
    handles.v = handles.vt;
    handles.w = handles.wt;

end
if handles.popup == 2,
    handles.u = handles.ua;
    handles.v = handles.va;
    handles.w = handles.wa;

end
if handles.popup == 3,
    handles.u = handles.us;
    handles.v = handles.vs;
    handles.w = handles.ws;

end
if handles.popup == 4,
    handles.u = handles.up;
    handles.v = handles.vp;
    handles.w = handles.wp;

end

%handles.displ = sqrt(handles.u.^2 + handles.v.^2 + handles.w.^2);

axes(handles.axes28);
%im(handles.tpic);
handles.xx = squeeze(handles.x(:,:,round(p/2)));
handles.yy = squeeze(handles.y(:,:,round(p/2)));
handles.vxy = squeeze(handles.v(:,:,round(p/2)));

%handles.displ;
contourf(handles.xx, handles.yy,handles.vxy); colorbar;
h = colorbar;
set(get(h,'title'),'string','Pixel','fontweight','b','fontsize',12,'color','k');
set(h,'fontweight','b', 'fontsize',12);
grid on
axis tight
set(gca,'fontweight','b','FontSize',12,'xcolor','k','ycolor','k');
xlabel('x (pixel)','fontweight','b','FontSize',12); 
ylabel('y (pixel)','fontweight','b','FontSize',12); 

axes(handles.axes29);
handles.yy = squeeze(handles.y(:,round(n/2),:));
handles.zz = squeeze(handles.z(:,round(n/2),:));
handles.vyz = squeeze(handles.v(:,round(n/2),:));

%handles.displ;
contourf(handles.zz, handles.yy,handles.vyz); colorbar;
h = colorbar;
set(get(h,'title'),'string','Pixel','fontweight','b','fontsize',12,'color','k');
set(h,'fontweight','b', 'fontsize',12);
grid on
axis tight
set(gca,'fontweight','b','FontSize',12,'xcolor','k','ycolor','k');
xlabel('z (pixel)','fontweight','b','FontSize',12); 
ylabel('y (pixel)','fontweight','b','FontSize',12); 

axes(handles.axes31);
handles.xx = squeeze(handles.x(round(m/2),:,:));
handles.zz = squeeze(handles.z(round(m/2),:,:));
handles.vxz = squeeze(handles.v(round(m/2),:,:));

%handles.displ;
contourf(handles.zz, handles.xx,handles.vxz); colorbar;
h = colorbar;
set(get(h,'title'),'string','Pixel','fontweight','b','fontsize',12,'color','k');
set(h,'fontweight','b', 'fontsize',12);
grid on
axis tight
set(gca,'fontweight','b','FontSize',12,'xcolor','k','ycolor','k');
xlabel('z (pixel)','fontweight','b','FontSize',12); 
ylabel('x (pixel)','fontweight','b','FontSize',12);

% --- Executes on button press in radiobutton20.
function radiobutton20_Callback(hObject, eventdata, handles)
% hObject    handle to radiobutton20 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
off = [handles.displ1];
set(off,'Value',0)
off = [handles.radiobutton19];
set(off,'Value',0)
off = [handles.radiobutton21];
set(off,'Value',0)
% Hint: get(hObject,'Value') returns toggle state of radiobutton20
m = handles.m; 
n = handles.n; 
p = handles.p; 

if handles.popup == 1,
    handles.u = handles.ut;
    handles.v = handles.vt;
    handles.w = handles.wt;

end
if handles.popup == 2,
    handles.u = handles.ua;
    handles.v = handles.va;
    handles.w = handles.wa;

end
if handles.popup == 3,
    handles.u = handles.us;
    handles.v = handles.vs;
    handles.w = handles.ws;

end
if handles.popup == 4,
    handles.u = handles.up;
    handles.v = handles.vp;
    handles.w = handles.wp;

end

%handles.displ = sqrt(handles.u.^2 + handles.v.^2 + handles.w.^2);

axes(handles.axes28);
%im(handles.tpic);
handles.xx = squeeze(handles.x(:,:,round(p/2)));
handles.yy = squeeze(handles.y(:,:,round(p/2)));
handles.vxy = squeeze(handles.w(:,:,round(p/2)));

%handles.displ;
contourf(handles.xx, handles.yy,handles.vxy); colorbar;
h = colorbar;
set(get(h,'title'),'string','Pixel','fontweight','b','fontsize',12,'color','k');
set(h,'fontweight','b', 'fontsize',12);
grid on
axis tight
set(gca,'fontweight','b','FontSize',12,'xcolor','k','ycolor','k');
xlabel('x (pixel)','fontweight','b','FontSize',12); 
ylabel('y (pixel)','fontweight','b','FontSize',12); 

axes(handles.axes29);
handles.yy = squeeze(handles.y(:,round(n/2),:));
handles.zz = squeeze(handles.z(:,round(n/2),:));
handles.vyz = squeeze(handles.w(:,round(n/2),:));

%handles.displ;
contourf(handles.zz, handles.yy,handles.vyz); colorbar;
h = colorbar;
set(get(h,'title'),'string','Pixel','fontweight','b','fontsize',12,'color','k');
set(h,'fontweight','b', 'fontsize',12);
grid on
axis tight
set(gca,'fontweight','b','FontSize',12,'xcolor','k','ycolor','k');
xlabel('z (pixel)','fontweight','b','FontSize',12); 
ylabel('y (pixel)','fontweight','b','FontSize',12); 

axes(handles.axes31);
handles.xx = squeeze(handles.x(round(m/2),:,:));
handles.zz = squeeze(handles.z(round(m/2),:,:));
handles.vxz = squeeze(handles.w(round(m/2),:,:));

%handles.displ;
contourf(handles.zz, handles.xx,handles.vxz); colorbar;
h = colorbar;
set(get(h,'title'),'string','Pixel','fontweight','b','fontsize',12,'color','k');
set(h,'fontweight','b', 'fontsize',12);
grid on
axis tight
set(gca,'fontweight','b','FontSize',12,'xcolor','k','ycolor','k');
xlabel('z (pixel)','fontweight','b','FontSize',12); 
ylabel('x (pixel)','fontweight','b','FontSize',12);

% --- Executes on button press in radiobutton21.
function radiobutton21_Callback(hObject, eventdata, handles)
% hObject    handle to radiobutton21 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
%set(handles.radiobutton20,'Enable','off')
off = [handles.displ1];
set(off,'Value',0)
off = [handles.radiobutton20];
set(off,'Value',0)
off = [handles.radiobutton19];
set(off,'Value',0)
% Hint: get(hObject,'Value') returns toggle state of radiobutton21
m = handles.m; 
n = handles.n; 
p = handles.p; 

if handles.popup == 1,
    handles.u = handles.ut;
    handles.v = handles.vt;
    handles.w = handles.wt;

end
if handles.popup == 2,
    handles.u = handles.ua;
    handles.v = handles.va;
    handles.w = handles.wa;

end
if handles.popup == 3,
    handles.u = handles.us;
    handles.v = handles.vs;
    handles.w = handles.ws;

end
if handles.popup == 4,
    handles.u = handles.up;
    handles.v = handles.vp;
    handles.w = handles.wp;

end

handles.displ = sqrt(handles.u.^2 + handles.v.^2 + handles.w.^2);

axes(handles.axes28);
%im(handles.tpic);
handles.xx = squeeze(handles.x(:,:,round(p/2)));
handles.yy = squeeze(handles.y(:,:,round(p/2)));
handles.vxy = squeeze(handles.displ(:,:,round(p/2)));

%handles.displ;
contourf(handles.xx, handles.yy,handles.vxy); colorbar;
h = colorbar;
set(get(h,'title'),'string','Pixel','fontweight','b','fontsize',12,'color','k');
set(h,'fontweight','b', 'fontsize',12);
grid on
axis tight
set(gca,'fontweight','b','FontSize',12,'xcolor','k','ycolor','k');
xlabel('x (pixel)','fontweight','b','FontSize',12); 
ylabel('y (pixel)','fontweight','b','FontSize',12); 

axes(handles.axes29);
handles.yy = squeeze(handles.y(:,round(n/2),:));
handles.zz = squeeze(handles.z(:,round(n/2),:));
handles.vyz = squeeze(handles.displ(:,round(n/2),:));

%handles.displ;
contourf(handles.zz, handles.yy,handles.vyz); colorbar;
h = colorbar;
set(get(h,'title'),'string','Pixel','fontweight','b','fontsize',12,'color','k');
set(h,'fontweight','b', 'fontsize',12);
grid on
axis tight
set(gca,'fontweight','b','FontSize',12,'xcolor','k','ycolor','k');
xlabel('z (pixel)','fontweight','b','FontSize',12); 
ylabel('y (pixel)','fontweight','b','FontSize',12); 

axes(handles.axes31);
handles.xx = squeeze(handles.x(round(m/2),:,:));
handles.zz = squeeze(handles.z(round(m/2),:,:));
handles.vxz = squeeze(handles.displ(round(m/2),:,:));

%handles.displ;
contourf(handles.zz, handles.xx,handles.vxz); colorbar;
h = colorbar;
set(get(h,'title'),'string','Pixel','fontweight','b','fontsize',12,'color','k');
set(h,'fontweight','b', 'fontsize',12);
grid on
axis tight
set(gca,'fontweight','b','FontSize',12,'xcolor','k','ycolor','k');
xlabel('z (pixel)','fontweight','b','FontSize',12); 
ylabel('x (pixel)','fontweight','b','FontSize',12);


% --- Executes on button press in viewdef.
function viewdef_Callback(hObject, eventdata, handles)
% hObject    handle to viewdef (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
Isize = size(handles.pic);
original_image = handles.pic;
oxy = squeeze(handles.pic(:,:,round(Isize(3)/2)));
oyz = squeeze(handles.pic(:,round(Isize(2)/2),:));
oxz = squeeze(handles.pic(round(Isize(1)/2),:,:));
figure; colormap gray; set(gcf,'Color','white');
subplot(3,3,[1 2 4 5]); imagesc(oxy); axis image; title('Original Image: X-Y'); 
set(gca,'YDir','normal','FontName','Helvetica','fontweight','b'); hold on;
subplot(3,3,[3 6]); imagesc(oyz); axis image; title('Y-Z'); 
set(gca,'YDir','normal','XDir','reverse','FontName','Helvetica','fontweight','b'); hold on;
subplot(3,3,[7 8]); imagesc(oxz'); axis image; title('X-Z'); 
set(gca,'YDir','normal','FontName','Helvetica','fontweight','b');
hold off;

translated_image = handles.tpic;
txy = squeeze(handles.tpic(:,:,round(Isize(3)/2)));
tyz = squeeze(handles.tpic(:,round(Isize(2)/2),:));
txz = squeeze(handles.tpic(round(Isize(1)/2),:,:));
figure; colormap gray; set(gcf,'Color','white');
subplot(3,3,[1 2 4 5]); imagesc(txy); axis image; title('Translated Image: X-Y'); 
set(gca,'YDir','normal','FontName','Helvetica','fontweight','b'); hold on;
subplot(3,3,[3 6]); imagesc(txz); axis image; title('Y-Z'); 
set(gca,'YDir','normal','XDir','reverse','FontName','Helvetica','fontweight','b'); hold on;
subplot(3,3,[7 8]); imagesc(txz'); axis image; title('X-Z'); 
set(gca,'YDir','normal','FontName','Helvetica','fontweight','b');
hold off;

strain_image = handles.strpic;
strxy = squeeze(handles.strpic(:,:,round(Isize(3)/2)));
stryz = squeeze(handles.strpic(:,round(Isize(2)/2),:));
strxz = squeeze(handles.strpic(round(Isize(1)/2),:,:));
figure; colormap gray; set(gcf,'Color','white');
subplot(3,3,[1 2 4 5]); imagesc(strxy); axis image; title('Uniaxial Image: X-Y'); 
set(gca,'YDir','normal','FontName','Helvetica','fontweight','b'); hold on;
subplot(3,3,[3 6]); imagesc(stryz); axis image; title('Y-Z'); 
set(gca,'YDir','normal','XDir','reverse','FontName','Helvetica','fontweight','b'); hold on;
subplot(3,3,[7 8]); imagesc(strxz'); axis image; title('X-Z'); 
set(gca,'YDir','normal','FontName','Helvetica','fontweight','b');
hold off;

shear_image = handles.shpic;
shxy = squeeze(handles.shpic(:,:,round(Isize(3)/2)));
shyz = squeeze(handles.shpic(:,round(Isize(2)/2),:));
shxz = squeeze(handles.shpic(round(Isize(1)/2),:,:));
figure; colormap gray; set(gcf,'Color','white');
subplot(3,3,[1 2 4 5]); imagesc(shxy); axis image; title('Shear Image: X-Y'); 
set(gca,'YDir','normal','FontName','Helvetica','fontweight','b'); hold on;
subplot(3,3,[3 6]); imagesc(shyz); axis image; title('Y-Z'); 
set(gca,'YDir','normal','XDir','reverse','FontName','Helvetica','fontweight','b'); hold on;
subplot(3,3,[7 8]); imagesc(shxz'); axis image; title('X-Z'); 
set(gca,'YDir','normal','FontName','Helvetica','fontweight','b');
hold off;

pointload_image = handles.ppic;
pxy = squeeze(handles.ppic(:,:,round(Isize(3)/2)));
pyz = squeeze(handles.ppic(:,round(Isize(2)/2),:));
pxz = squeeze(handles.ppic(round(Isize(1)/2),:,:));
figure; colormap gray; set(gcf,'Color','white');
subplot(3,3,[1 2 4 5]); imagesc(pxy); axis image; title('Point Force Image: X-Y'); 
set(gca,'YDir','normal','FontName','Helvetica','fontweight','b'); hold on;
subplot(3,3,[3 6]); imagesc(pyz); axis image; title('Y-Z'); 
set(gca,'YDir','normal','XDir','reverse','FontName','Helvetica','fontweight','b'); hold on;
subplot(3,3,[7 8]); imagesc(pxz'); axis image; title('X-Z'); 
set(gca,'YDir','normal','FontName','Helvetica','fontweight','b');
hold off;

imagechoice = questdlg('Would you like to save the reference and deformed xy images?', ...
    'Save images', ...
    'Save to *.tif','Save to *.mat','No','No');
% Handle response
switch imagechoice
    case 'Save to *.tif'
        imwrite(uint8(round(255*flip(oxy,1)./max(oxy(:)))),'original_image.tif');
        imwrite(uint8(round(255*flip(txy,1)./max(txy(:)))),'translated_image.tif');
        imwrite(uint8(round(255*flip(strxy,1)./max(strxy(:)))),'strain_image.tif');
        imwrite(uint8(round(255*flip(shxy,1)./max(shxy(:)))),'shear_image.tif');
        imwrite(uint8(round(255*flip(pxy,1)./max(pxy(:)))),'pointload_image.tif');
    case 'Save to *.mat'
        save('imagedata.mat','original_image','translated_image','strain_image','shear_image','pointload_image');
    case 'No'
end

usize = size(handles.ut);
umx = cell(1,4);
umx{1}{3} = handles.wt; umx{1}{2} = handles.vt; umx{1}{1} = handles.ut;
umx{2}{3} = handles.wa; umx{2}{2} = handles.va; umx{2}{1} = handles.ua;
umx{3}{3} = handles.ws; umx{3}{2} = handles.vs; umx{3}{1} = handles.us;
umx{4}{3} = handles.wp; umx{4}{2} = handles.vp; umx{4}{1} = handles.up;

uall = cell(1,4); %order of {translation, strain, shear, pointload}
for i=1:4
    uall{i}=cell(1,3); 
    for j=1:3
        uall{i}{j}=cell(1,3); %uall{t,str,sh,p}{u,v,w}{xy,yz,xz}
        uall{i}{j}{1} = squeeze(umx{i}{j}(:,:,round(usize(3)/2)));
        uall{i}{j}{2} = squeeze(umx{i}{j}(:,round(usize(2)/2),:));
        uall{i}{j}{3} = squeeze(umx{i}{j}(round(usize(1)/2),:,:)); 
    end
end

strname = cell(1,4);
strname{1} = 'Translation';
strname{2} = 'Uniaxial';
strname{3} = 'Shear';
strname{4} = 'Point Force';

view{3} = 'xz';
view{2} = 'yz';
view{1} = 'xy';

disp{3} = 'u3';
disp{2} = 'u2';
disp{1} = 'u1'; 

for n=1:4
        f = figure; set(f, 'Position', [50, 50, 1280, 320]); hold on;
        colormap hot; set(gcf,'Color','white');
    for i=1:3
        subplot(3,9,[1 2 10 11]+(i-1)*3); imagesc(uall{n}{i}{1}); axis image; title([strname{n} ', u_' num2str(i) ' Component: X-Y']); colorbar;
        set(gca,'YDir','normal','FontName','Helvetica','fontweight','b'); hold on;
        subplot(3,9,[3 12]+(i-1)*3); imagesc(uall{n}{i}{2}); axis image; title('Y-Z'); colorbar;
        set(gca,'YDir','normal','XDir','reverse','FontName','Helvetica','fontweight','b'); hold on;
        subplot(3,9,[19 20]+(i-1)*3); imagesc(uall{n}{i}{3}'); axis image; title('X-Z'); colorbar;
        set(gca,'YDir','normal','FontName','Helvetica','fontweight','b'); 
    end
    hold off;
end

displchoice = questdlg('Would you like to save the displacement fields?', ...
    'Save displacements', ...
    'Save to *.tif','Save to *.mat','No','No');
% Handle response
switch displchoice
    case 'Save to *.tif'
        for i=1:4
            for j=1:3
                for k=1:3;
                imwrite(uint8(255*(uall{i}{j}{k}-min(uall{i}{j}{k}(:)))/(max(uall{i}{j}{k}(:))-min(uall{i}{j}{k}(:)))),[disp{j} view{k} strname{i} '.tif']);
                end
            end
        end
    case 'Save to *.mat'       
        save('uall.mat','uall');
    case 'No'
end
